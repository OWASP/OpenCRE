"""Change Standards Table to Nodes

Revision ID: 3c65127871a6
Revises: 7a17989aa1e3
Create Date: 2022-01-16 15:35:04.098829

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy import engine_from_config


# revision identifiers, used by Alembic.
revision = "3c65127871a6"
down_revision = "7a17989aa1e3"
branch_labels = None
depends_on = None


def migrate_data_between_standards_and_node(new_table, old_table_name):
    config = op.get_context().config
    engine = engine_from_config(
        config.get_section(config.config_ini_section), prefix="sqlalchemy."
    )
    connection = op.get_bind()
    standards = connection.execute(
        f"Select id,name,section,subsection,link from {old_table_name}"
    )
    standards_data = standards.fetchall() if standards else []
    if old_table_name == "standard":
        nodes = [
            {
                "id": dat[0],
                "name": dat[1],
                "section": dat[2],
                "subsection": dat[3],
                "link": dat[4],
                "ntype": "Standard",
            }
            for dat in standards_data
        ]
    else:
        nodes = [
            {
                "id": dat[0],
                "name": dat[1],
                "section": dat[2],
                "subsection": dat[3],
                "link": dat[4],
            }
            for dat in standards_data
        ]
    op.bulk_insert(new_table, nodes)


def migrate_data_between_links_and_cre_node_links(
    new_table, old_table_name, standard_column_name="standard"
):
    new_column_name = "standard"
    if standard_column_name == "standard":
        new_column_name = "node"
    config = op.get_context().config
    engine = engine_from_config(
        config.get_section(config.config_ini_section), prefix="sqlalchemy."
    )
    connection = op.get_bind()
    links = connection.execute(
        f"Select type,cre,{standard_column_name} from {old_table_name}"
    )
    links_data = links.fetchall() if links else []
    cre_node_links = [
        {"type": dat[0], "cre": dat[1], new_column_name: dat[2]} for dat in links_data
    ]
    op.bulk_insert(new_table, cre_node_links)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    nodes_table = op.create_table(
        "node",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("section", sa.String(), nullable=True),
        sa.Column("subsection", sa.String(), nullable=True),
        sa.Column("tags", sa.String(), nullable=True),
        sa.Column("version", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("ntype", sa.String(), nullable=False),
        sa.Column("link", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_node")),
        sa.UniqueConstraint(
            "name",
            "section",
            "subsection",
            "ntype",
            "description",
            "version",
            name="uq_node",
        ),
    )
    cre_node_links_table = op.create_table(
        "cre_node_links",
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("cre", sa.Integer(), nullable=False),
        sa.Column("node", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["cre"], ["cre.id"], name=op.f("fk_cre_node_links_cre_cre")
        ),
        sa.ForeignKeyConstraint(
            ["node"], ["node.id"], name=op.f("fk_cre_node_links_node_node")
        ),
        sa.PrimaryKeyConstraint("cre", "node", name=op.f("pk_cre_node_links")),
        sa.UniqueConstraint("cre", "node", name="uq_pair"),
    )
    migrate_data_between_links_and_cre_node_links(
        new_table=cre_node_links_table, old_table_name="links"
    )
    migrate_data_between_standards_and_node(
        new_table=nodes_table, old_table_name="standard"
    )
    with op.batch_alter_table("crelinks", schema=None) as batch_op:
        batch_op.create_unique_constraint("uq_pair", ["group", "cre"])
    op.rename_table("crelinks", "cre_links")
    op.drop_table("links")
    op.drop_table("standard")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.rename_table("cre_links", "crelinks")
    with op.batch_alter_table("crelinks", schema=None) as batch_op:
        batch_op.drop_constraint("uq_pair", type_="unique")

    standard = op.create_table(
        "standard",
        sa.Column("id", sa.INTEGER(), primary_key=True),
        sa.Column("name", sa.VARCHAR(), nullable=True),
        sa.Column("section", sa.VARCHAR(), nullable=False),
        sa.Column("subsection", sa.VARCHAR(), nullable=True),
        sa.Column("tags", sa.VARCHAR(), nullable=True),
        sa.Column("version", sa.VARCHAR(), nullable=True),
        sa.Column("link", sa.VARCHAR(), nullable=True),
        sa.UniqueConstraint(
            columns=["name", "section", "subsection"],
            constraint_name="standard_section",
        ),
    )
    links = op.create_table(
        "links",
        sa.Column("type", sa.VARCHAR(), nullable=True),
        sa.Column("cre", sa.INTEGER(), nullable=False),
        sa.Column("standard", sa.INTEGER(), nullable=False),
        sa.ForeignKeyConstraint(["cre"], ["cre.id"], name="fk_links_cre_cre"),
        sa.ForeignKeyConstraint(
            ["standard"], ["standard.id"], name="fk_links_id_standard"
        ),
        sa.PrimaryKeyConstraint("cre", "standard", name="pk_links"),
    )
    migrate_data_between_standards_and_node(new_table=standard, old_table_name="node")
    migrate_data_between_links_and_cre_node_links(
        new_table=links, old_table_name="cre_node_links", standard_column_name="node"
    )
    op.drop_table("cre_node_links")
    op.drop_table("node")
    # ### end Alembic commands ###
