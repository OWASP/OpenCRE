doctype: CRE
id: 422-005
links:
- document:
    doctype: CRE
    id: 764-765
    name: Sanitization and sandboxing
    tags:
    - XSS protection
    - Injection protection
  ltype: Contains
- document:
    doctype: Standard
    hyperlink: https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md
    name: ASVS
    section: V5.2.5
    sectionID: Verify that the application protects against template injection attacks
      by ensuring that any user input being included is sanitized or sandboxed.
  ltype: Linked To
- document:
    doctype: Standard
    hyperlink: https://cwe.mitre.org/data/definitions/94.html
    name: CWE
    section: ''
    sectionID: '94'
  ltype: Linked To
- document:
    doctype: Standard
    hyperlink: https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server_Side_Template_Injection.html
    name: OWASP Web Security Testing Guide (WSTG)
    section: WSTG-INPV-18
  ltype: Linked To
- document:
    doctype: Standard
    hyperlink: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    name: OWASP Cheat Sheets
    section: Server Side Request Forgery Prevention Cheat Sheet
  ltype: Linked To
- document:
    doctype: Standard
    hyperlink: https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    name: OWASP Cheat Sheets
    section: Cross Site Scripting Prevention Cheat Sheet
  ltype: Linked To
- document:
    doctype: Standard
    hyperlink: https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html
    name: OWASP Cheat Sheets
    section: DOM based XSS Prevention Cheat Sheet
  ltype: Linked To
- document:
    doctype: Standard
    hyperlink: https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
    name: OWASP Cheat Sheets
    section: Unvalidated Redirects and Forwards Cheat Sheet
  ltype: Linked To
- document:
    description: Instead of inserting the user input in the template, use it as rendering
      argument.
    doctype: Tool
    hyperlink: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/SstiScanRule.java
    name: ZAP Rule
    section: Server Side Template Injection
    sectionID: '90035'
    tags:
    - Active
    - '90035'
    tooltype: Offensive
  ltype: Linked To
- document:
    description: 'Consider whether or not ELMAH is actually required in production,
      if it isn''t then disable it. If it is then ensure access to it requires authentication
      and authorization. See also: https://elmah.github.io/a/securing-error-log-pages/'
    doctype: Tool
    hyperlink: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ElmahScanRule.java
    name: ZAP Rule
    section: ELMAH Information Leak
    sectionID: '40028'
    tags:
    - Active
    - '40028'
    tooltype: Offensive
  ltype: Linked To
- document:
    doctype: Tool
    hyperlink: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/CodeInjectionScanRule.java
    name: ZAP Rule
    section: Server Side Code Injection - ASP Code Injection
    sectionID: 90019-2
    tags:
    - Active
    - 90019-2
    tooltype: Offensive
  ltype: Linked To
- document:
    doctype: Tool
    hyperlink: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/CodeInjectionScanRule.java
    name: ZAP Rule
    section: Server Side Code Injection - PHP Code Injection
    sectionID: 90019-1
    tags:
    - Active
    - 90019-1
    tooltype: Offensive
  ltype: Linked To
- document:
    description: Ensure the .htaccess file is not accessible.
    doctype: Tool
    hyperlink: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/HtAccessScanRule.java
    name: ZAP Rule
    section: .htaccess Information Leak
    sectionID: '40032'
    tags:
    - Active
    - '40032'
    tooltype: Offensive
  ltype: Linked To
- document:
    doctype: Standard
    hyperlink: https://capec.mitre.org/data/definitions/242.html
    name: CAPEC
    section: Code Injection
    sectionID: '242'
    version: '3.9'
  ltype: SAME
- document:
    doctype: Standard
    hyperlink: https://capec.mitre.org/data/definitions/35.html
    name: CAPEC
    section: Leverage Executable Code in Non-Executable Files
    sectionID: '35'
    version: '3.9'
  ltype: SAME
- document:
    doctype: Standard
    hyperlink: https://capec.mitre.org/data/definitions/77.html
    name: CAPEC
    section: Manipulating User-Controlled Variables
    sectionID: '77'
    version: '3.9'
  ltype: SAME
name: Sanitize/sandbox user input where template-injection is a threat
