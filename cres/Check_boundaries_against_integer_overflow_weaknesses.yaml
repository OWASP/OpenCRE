doctype: CRE
id: 482-771
links:
- document:
    doctype: CRE
    id: 866-553
    name: Memory, String, and Unmanaged Code
    tags:
    - Injection protection
  ltype: Contains
- document:
    doctype: Standard
    hyperlink: https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md
    name: ASVS
    section: V5.4.3
    sectionID: Verify that sign, range, and input validation techniques are used to
      prevent integer overflows.
  ltype: Linked To
- document:
    doctype: Standard
    hyperlink: https://cwe.mitre.org/data/definitions/190.html
    name: CWE
    section: ''
    sectionID: '190'
  ltype: Linked To
- document:
    description: In order to prevent overflows and divide by 0 (zero) errors in the
      application, please rewrite the backend program, checking if the values of integers
      being processed are within the application's allowed range. This will require
      a recompilation of the backend executable.
    doctype: Tool
    hyperlink: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/IntegerOverflowScanRule.java
    name: ZAP Rule
    section: Integer Overflow Error
    sectionID: '30003'
    tags:
    - Active
    - '30003'
    tooltype: Offensive
  ltype: Linked To
- document:
    doctype: Standard
    hyperlink: https://capec.mitre.org/data/definitions/92.html
    name: CAPEC
    section: Forced Integer Overflow
    sectionID: '92'
    version: '3.9'
  ltype: SAME
name: Check boundaries against integer overflow weaknesses
